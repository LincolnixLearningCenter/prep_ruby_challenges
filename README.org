#+options: toc:nil

*prep_ruby_challenges*

[[http://www.vikingcodeschool.com/web-markup-and-coding/level-up-your-ruby-judo][The Ruby challenge problems from the Markup and Coding course of the Viking Code School Prep Work]]

* Ruby Calisthenics

** Power
   
   Write a method /power/ which takes two integers (/base/ and /exponent/) and 
   returns the /base/ raised to the power of /exponent/. Do not use Ruby's "**"
   operator for this!

   : > power(3,4)
   : => 81 # (3*3*3*3)

   #+begin_src ruby
     def power(base,exponent)
       # returns base raised to the power of exponent without the use of ** operator
       
       a = base
       b = exponent
       c = []

       b.times do
         c.push a
       end

       c.inject(1) {|product, n| product * n}
     end

     p power(3,4)
   #+end_src

   #+RESULTS:
   : 8

** Factorial
   
   Write a method /factorial/ which takes a number and returns the product of 
   every number up to the current number multiplied together.

   : > factorial(5)
   : => 120 # from 1*2*3*4*5

   #+begin_src ruby
     def factorial(n)
       # Int => Int
       # Takes a number and returns the product of every number up to 
       # the current number multiplied together

       a = []

       n.downto(1).each do |i|
         a.push i
       end

       return a.inject(1) {|product, n| product * n}

     end

     p factorial(5)
   #+end_src 

   #+RESULTS:
   : 120

** Uniques

   Write a method /uniques/ which takes an array of items and returns the array
   without any duplicates. Don't use Ruby's /uniq/ method.

   : uniques([1,5,"frog",2,1,3,"frog"])
   : => [1,5,"frog",2,3]

   #+begin_src ruby :tangle uniques.rb
     #!/usr/bin/ruby

     def uniques(array)
       # Array of Items => Array of Items
       # Takes an array, returns array with duplicate items removed.
       # Write without uniq

       no_dupes = []
       couples = array.combination(2)
       groups = array.group_by{|e| e}

       groups.each do |g|
         no_dupes.push(g[0])
       end

       return no_dupes
     end

     p uniques([1,5,"frog",2,1,3,"frog"])
   #+end_src

   #+RESULTS:
   | 1 | 5 | frog | 2 | 3 |

** Combinations
** Primes
** Rectangle Overlap  
